#include "main.h"
#include "LoadBMP.h"
#define ESC 27
#define FIN -50//long sol distance ecran 
#define MINY 0
#define MAXY 100//hauteur mur
#define MAXX 70//long
#define MINX -70//long
#define NBOBST 500//nobre boulle
#define MAXSIZEOBS 1
#define SIZECAMERA 1
#define BUFFER_OFFSET(i) ((char *)NULL + (i)) //1 char = 1 octect
static GLuint idRepere = 0, repere = 0, idSol = 0, idFond = 0, idTexture = 0 ;
static GLuint idTextureSol = 0, idTextureSphere = 0/*, idTextureCiel = 0*/, level = 0;
static GLfloat zoom = 50, deplaceX = 0.0, deplaceY = 5, vitesse = 0.5;

GLUquadricObj *quadric;

void init2 (void){
  glEnable(GL_DEPTH_TEST);
  glEnable(GL_CULL_FACE); 
   glCullFace(GL_BACK);
 
  quadric=gluNewQuadric();
 
  glMatrixMode(GL_PROJECTION);
  glFrustum(-.33,.33,-.33,.33,.5,40);
  glMatrixMode(GL_MODELVIEW);
  gluLookAt(-4,10,6,0,0,0,0,1,0); 

  glEnable(GL_LIGHTING);
  glEnable(GL_LIGHT0);

  glBlendFunc(GL_SRC_ALPHA,GL_ONE_MINUS_SRC_ALPHA);
  glEnable(GL_NORMALIZE);
  glClearStencil(5);
}

void drawAirplane(void){
  GLfloat  airplanecolor[4]={.75,.75,.75,1};
 
   glMaterialfv(GL_FRONT_AND_BACK,GL_AMBIENT_AND_DIFFUSE,airplanecolor);
   glDisable(GL_CULL_FACE); 

  glPushMatrix();
  glTranslatef(0,0,-2.5);
  // gluCylinder(quadric,.5,.5,5,10,10);    
  gluCylinder(quadAtmosphere,.5,.5,5,10,10);//cylindre
  glPushMatrix();
  glTranslatef(0,0,5);
  // gluCylinder(quadric,.5,0,1,10,10); 
  gluCylinder(quadAtmosphere,.5,0,1,10,10);//cone
  glPopMatrix();

  glPushMatrix();
  glTranslatef(0,0,3);
  glScalef(3,.1,1);
  //  gluSphere(quadric,1,10,10);
gluSphere(quadAtmosphere,1,10,10);// sphere devant

  glPopMatrix(); 

  glPushMatrix();
  glTranslatef(0,0,.5);
  glScalef(2,.1,.5);
  // gluSphere(quadric,1,10,10);
 gluSphere(quadAtmosphere,1,10,10);// sphere deriere
  glPopMatrix();


 
  glBegin(GL_TRIANGLES); 
  gluCylinder(quadAtmosphere,1.5,0,1.5,2,2);//elron et sous_elron
  /* glNormal3f(1,0,0);
  glVertex3f(0,1.5,0);
  glVertex3f(0,.5,1);
  glVertex3f(0,.5,0);
  glNormal3f(-1,0,0);
  glVertex3f(0,1.5,0);
  glVertex3f(0,.5,0);
  glVertex3f(0,.5,1);*/
  glEnd();

  glDisable(GL_CULL_FACE); 

  glRotatef(180,0,1,0);
  // gluDisk(quadric,0,.5,10,10);
  gluDisk(quadAtmosphere,0,.5,10,10);// forme des projectile cylindre

  glPopMatrix();
}

void collision(void){
  GLint i;
  GLfloat distance = 0.0;
  for(i=0;i<NBOBST;i++)
    {
      distance = ((tobstacle[i].x-deplaceX) * (tobstacle[i].x-deplaceX)) + ((tobstacle[i].y-deplaceY) * (tobstacle[i].y-deplaceY)) + ((tobstacle[i].z-zoom) * (tobstacle[i].z-zoom));
      distance = sqrt(distance);
      if(distance<= SIZECAMERA + tobstacle[i].size)
	{
	  printf("YOU LOOSE AU NIV %d !!!!\n",level);
	  exit(0);
	}
    }
}

void initObstacle(void){
  GLint i;
  for(i=0;i<NBOBST;i++)
    {
      tobstacle[i].y=(rand()/(float)RAND_MAX) * (MAXY-50);
      // printf("y=%f\n",tobstacle[i].y);
      if(i & 1)
	tobstacle[i].x=(rand()/(float)RAND_MAX * MAXX);
      else
	tobstacle[i].x=-(rand()/(float)RAND_MAX * MAXX);
      // printf("x=%f\n",tobstacle[i].x);
       if(i & 1)
	tobstacle[i].z=(rand()/(float)RAND_MAX * FIN);
      else
	tobstacle[i].z=-(rand()/(float)RAND_MAX * FIN);
       //printf("z=%f\n",tobstacle[i].z);
       tobstacle[i].size=rand()%MAXSIZEOBS+2.0;//taille boule
      // printf("size=%.3f\n",tobstacle[i].size);
    }
}

void dessineSol(void){
  glPushMatrix();
  glBindBuffer(GL_ARRAY_BUFFER,idSol);
  glBindTexture(GL_TEXTURE_2D,idTextureSol);
  glEnableClientState(GL_VERTEX_ARRAY);
  glEnableClientState(GL_TEXTURE_COORD_ARRAY);
  glVertexPointer(3,GL_FLOAT,3*sizeof(GLfloat), BUFFER_OFFSET(0));
  glTexCoordPointer(2,GL_FLOAT,2*sizeof(GLfloat),BUFFER_OFFSET(18*sizeof(GLfloat)));
  glDrawArrays(GL_TRIANGLES,0,6);
  glDisableClientState(GL_VERTEX_ARRAY); 
  glDisableClientState(GL_TEXTURE_COORD_ARRAY);
  glBindBuffer(GL_ARRAY_BUFFER,0);
  glBindTexture(GL_TEXTURE_2D,0);
  glPopMatrix();
}

void dessineFond(void){
  glPushMatrix();
  glBindBuffer(GL_ARRAY_BUFFER,idFond);
  glBindTexture(GL_TEXTURE_2D,idTexture);
  glEnableClientState(GL_VERTEX_ARRAY);
  glEnableClientState(GL_TEXTURE_COORD_ARRAY);
  glVertexPointer(3,GL_FLOAT,3*sizeof(GLfloat), BUFFER_OFFSET(0));
  glTexCoordPointer(2,GL_FLOAT,2*sizeof(GLfloat),BUFFER_OFFSET(12*sizeof(GLfloat)));
  glDrawArrays(GL_QUADS,0,4);
  glDisableClientState(GL_VERTEX_ARRAY); 
  glDisableClientState(GL_TEXTURE_COORD_ARRAY);
  glBindBuffer(GL_ARRAY_BUFFER,0);
  glBindTexture(GL_TEXTURE_2D,0);
  glPopMatrix();
}

void dessineObstacle(void)
{
  GLint i;
  glBindTexture(GL_TEXTURE_2D, idTextureSphere);
  for(i=0;i<NBOBST;i++)
    {
      glPushMatrix();
      glTranslatef(tobstacle[i].x,tobstacle[i].y,tobstacle[i].z);
      drawAirplane();//AVION
      // gluSphere(quadAtmosphere,tobstacle[i].size,4,4);// forme des projectile cube
      // gluSphere(quadAtmosphere,tobstacle[i].size,20,20);// forme des projectile sphere
      glPopMatrix();
    }
   glBindTexture(GL_TEXTURE_2D, 0);
}
void cool(void){  
  initObstacle();
  dessineObstacle();
}

void display(void){
  if(zoom<FIN)
    {
      if(level==7)
	{
	  printf("YOU WIN level %d \n",level);
	  exit(0);
	}
      else
	{
	  level++;
	  vitesse+=0.5;
	  initObstacle();
	  zoom = 50;
	}
    } 
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT| GL_STENCIL_BUFFER_BIT); 
  GLfloat   lightpos[4]={10,10000,0,0};
  glLightfv(GL_LIGHT0,GL_POSITION,lightpos ); 

  glLoadIdentity();
  gluLookAt(deplaceX,deplaceY,zoom,deplaceX,deplaceY,zoom-0.1,0.0,1.0,0.0);//regarde devant toi !
  glPushMatrix();
  glTranslatef(deplaceX,deplaceY,zoom);
  glDisable(GL_TEXTURE_2D);
  glutWireSphere(SIZECAMERA,4,8); 
  glColor3f(0.0,1.0,0.0);
  glEnable(GL_TEXTURE_2D);
  glColor3f(1.0,1.0,1.0);
  glPopMatrix();
  if(repere)
    {
      glBindBuffer(GL_ARRAY_BUFFER,idRepere);
      glEnableClientState(GL_VERTEX_ARRAY);
      glEnableClientState(GL_COLOR_ARRAY);
      glVertexPointer(3,GL_FLOAT,3*sizeof(GLfloat), BUFFER_OFFSET(0));
      glColorPointer(3,GL_FLOAT,3*sizeof(GLfloat), BUFFER_OFFSET(18*sizeof(GLfloat)));
      glDrawArrays(GL_LINES,0,6);
      glDisableClientState(GL_VERTEX_ARRAY);
      glDisableClientState(GL_COLOR_ARRAY);
      glBindBuffer(GL_ARRAY_BUFFER,0);
    } 
 
  dessineSol();
  dessineFond(); 
  dessineObstacle();
  collision();
  glutSwapBuffers();
}

void keyboard( int key, int x, int y){
switch(key) {
  case GLUT_KEY_UP  :
    if(deplaceY+vitesse<MAXY-50) 
      deplaceY+=vitesse; 
    break;
  case GLUT_KEY_DOWN:
    if(deplaceY-vitesse>MINY) 
      deplaceY-=vitesse;
    break;
  case GLUT_KEY_LEFT   :
    if(deplaceX-vitesse>MINX) 
      deplaceX-=vitesse; 
    break;
  case GLUT_KEY_RIGHT:	
    if(deplaceX+vitesse<MAXX)
      deplaceX+=vitesse;
    break;
  default:
    break;
  }
 glutPostRedisplay();
}



void sp(unsigned char key, int x, int y){
  int i = 0;
  switch(key)
    {
    case ESC:
      exit(0);
      break;
    case 'r':
      if(repere)
	repere=0;
      else
	repere=1;
      break;
    case 'd':
      if(deplaceY-vitesse>MINY) 
	deplaceY-=vitesse;
      if(deplaceX+vitesse<MAXX)
	deplaceX+=vitesse;
      break;
  case 'q':
      if(deplaceY-vitesse>MINY) 
	deplaceY-=vitesse;
     if(deplaceX-vitesse>MINX) 
      deplaceX-=vitesse; 
      break;
 case 'e' :
    if(deplaceY+vitesse<MAXY-50) 
      deplaceY+=vitesse; 
    if(deplaceX+vitesse<MAXX)
	deplaceX+=vitesse;
 break;
 case 'a'  :
    if(deplaceY+vitesse<MAXY-50) 
      deplaceY+=vitesse; 
    if(deplaceX-vitesse>MINX) 
      deplaceX-=vitesse; 
 break;
 case 'p':
   if(i<=0||i>=0)	
   cool();
    break;
    default:
      break;
    }
  glutPostRedisplay();
}


void init (void){
  texture = malloc(sizeof(texture));//allocation de l'image
 GLfloat fogcol[]={0.5,0.5,0.5};


  GLfloat desrepere[]={0.0,0.0,0.0,//coordonnes des sommets
		       1.0,0.0,0.0,
		       0.0,0.0,0.0,
		       0.0,1.0,0.0,
		       0.0,0.0,0.0,
		       0.0,0.0,1.0,
		       1.0,0.0,0.0,//couleur des sommets
		       1.0,0.0,0.0,
		       0.0,1.0,0.0,
		       0.0,1.0,0.0,
		       0.0,0.0,1.0,
		       0.0,0.0,1.0};

  GLfloat sol[]={-160,0.0,FIN,//coordonnes des sommets
		 160,0.0,FIN,
		 -160,0.0,-FIN,
		 -160,0.0,-FIN,
		 160,0.0,-FIN,
		 160,0.0,FIN,
		 0.0,0.0, //coordonnees des textures
		 1.0,0.0,
		 0.0,1.0,
		 0.0,1.0,
		 1.0,1.0,
		 1.0,0.0};		    
  
  GLfloat fond[]={-160,0.0,FIN,//coordonnes des sommets
		  -160,MAXY,FIN,
		  160,MAXY,FIN,
		  160,0.0,FIN,
		  0.0,0.0,//coordonnees des textures
		  0.0,1.0,
		  1.0,1.0,
		  1.0,0.0};
 //    v7------v6                                                               
  //   /|         /|                                                                
  //  v3------v2|                                                                
  //  | |       | |                                                                
  //  | |v4---|-|v5                                                              
  //  |/        |/                                                                 
  //  v0------v1  
 
  glEnable(GL_FOG);
  glFogfv(GL_FOG_COLOR,fogcol);
  glFogf(GL_FOG_MODE,GL_LINEAR);
  glFogf(GL_FOG_START,20.0);
  glFogf(GL_FOG_END,100.0);	
 	  
  glGenBuffers(1,&idRepere); //genere VBO pour le repere
  glBindBuffer(GL_ARRAY_BUFFER, idRepere);
  glBufferData(GL_ARRAY_BUFFER, 36*sizeof(*desrepere), desrepere, GL_STATIC_DRAW);
  glBindBuffer(GL_ARRAY_BUFFER, 0);

  glGenBuffers(1,&idSol); //genere VBO pour le sol
  glBindBuffer(GL_ARRAY_BUFFER, idSol);
  glBufferData(GL_ARRAY_BUFFER, 30*sizeof(*sol), sol, GL_STATIC_DRAW);
  glBindBuffer(GL_ARRAY_BUFFER, 0);

  glGenBuffers(1,&idFond); //genere VBO pour le fond
  glBindBuffer(GL_ARRAY_BUFFER, idFond);
  glBufferData(GL_ARRAY_BUFFER, 20*sizeof(*fond), fond, GL_STATIC_DRAW);
  glBindBuffer(GL_ARRAY_BUFFER, 0); 

  //Debut des textures du fond
  if (texture == NULL) {
    fprintf(stderr, "Out of memory\n");
    return;
  }

  if (ImageLoad("ciel.bmp", texture)==-1) //chargement de l'image
    return;
  glGenTextures(1,&idTexture);
  glBindTexture(GL_TEXTURE_2D, idTexture);//chargement de la texture du fond
  glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);//charge les parametres
  glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
  glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
  glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
  glTexImage2D(GL_TEXTURE_2D,0,GL_RGB,texture->sizeX,texture->sizeY,0,GL_RGB,GL_UNSIGNED_BYTE,texture->data);
  glBindTexture(GL_TEXTURE_2D,0);//libere le port
  
//debut des textures du sol
  if (texture == NULL) {
    fprintf(stderr, "Out of memory\n");
    return;
  }

  if (ImageLoad("sol.bmp", texture)==-1) //chargement de l'image
    return;
  glGenTextures(1,&idTextureSol);
  glBindTexture(GL_TEXTURE_2D, idTextureSol); //chargement de la texture du sol
  glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);//charge les parametres
  glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
  glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
  glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
  glTexImage2D(GL_TEXTURE_2D,0,GL_RGB,texture->sizeX,texture->sizeY,0,GL_RGB,GL_UNSIGNED_BYTE,texture->data);
  glBindTexture(GL_TEXTURE_2D,0);//libere le port
 
  
    glClearColor(0.0,0.0,0.0,0.0);
  //declaration du quadrique (pour pouvoir coller une texture a une sphere)
  quadAtmosphere=gluNewQuadric();
  gluQuadricNormals(quadAtmosphere, GLU_SMOOTH);
  gluQuadricTexture(quadAtmosphere, GL_TRUE);
  if (texture == NULL) {
    fprintf(stderr, "Out of memory\n");
    return;
  }
  if (ImageLoad("fire.bmp", texture)) //chargement de l'image
    return;
  glGenTextures(1,&idTextureSphere); //chargement de la texture de la sphere
  glBindTexture(GL_TEXTURE_2D, idTextureSphere);
  glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);//charge les parametres
  glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
  glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
  glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
  glTexImage2D(GL_TEXTURE_2D,0,GL_RGB,texture->sizeX,texture->sizeY,0,GL_RGB,GL_UNSIGNED_BYTE,texture->data);
  glBindTexture(GL_TEXTURE_2D,0);//libere le port
  free(texture->data);
  free(texture);
  glEnable(GL_DEPTH_TEST);
  glEnable(GL_TEXTURE_2D);
  glShadeModel(GL_SMOOTH);
}

void idle(void){
  zoom-=vitesse/2;
  glutPostRedisplay();
}

void reshape (int w, int h){  
  glViewport (-0 , 0, (GLsizei) w, (GLsizei) h); 
  glMatrixMode (GL_PROJECTION); 
  glLoadIdentity (); 
  gluPerspective(50.0, (GLfloat) w/(GLfloat) h, 0.1, 7500.0); 
  glMatrixMode(GL_MODELVIEW);  
}

int main(int argc, char** argv){
  tobstacle=malloc(NBOBST*sizeof*tobstacle);
  srand(time(NULL));
  initObstacle();
  glutInit(&argc, argv); 
  glutInitDisplayMode (GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH); 
  glutInitWindowSize (1400, 1400); 
  glutInitWindowPosition (0, 0); 
  glutCreateWindow (argv[0]); 
  init2 ();
  init ();
  glutDisplayFunc(display);
  glutReshapeFunc(reshape);
  glutKeyboardFunc(sp);
  glutSpecialFunc(keyboard);
  glutIdleFunc(idle);
  glutMainLoop();
  return 0; 
}
